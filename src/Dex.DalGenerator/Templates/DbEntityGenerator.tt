<#
    // ReSharper disable RedundantNameQualifier
#>
<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Dex.DalGenerator.Core.Extensions" #>
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Collections.Generic;
<#
foreach (var enumNamespace in EnumNamespaces)
{
#>
using <#= enumNamespace #>;
<#
}
#>
using Dex.Ef.Contracts.Entities;

namespace <#=Namespace#>
{
#nullable enable
<#
	string implements = Entity.IsRootType ? " : " + string.Join(", ", Entity.Implements.Select(i=>i.GetFriendlyName())) : string.Empty;
#>
	[Table("<#= GetTableName(Entity) #>")]
	public partial class <#= Entity.Name #><#=implements#>
	{
<#
foreach(var prop in Entity.Properties.Values)
{
#>

		<#= GetAttributes(prop) #>
		public <#= prop.PropertyType.GetFriendlyName() + (prop.IsCollection? "[]" : "") + prop.GetNullableRefChar() #> <#= prop.Name #> { get; set; }<#= prop.SuppressNullableRef()#>
<#
}

if(Relations.Count() > 0)
{
	Write(Environment.NewLine);
}

foreach(var relation in Relations)
{
	string typeName = relation.IsCollection ? $"ICollection<{relation.TypeName}>?" : relation.TypeName + "?";
	if(relation.IsBackRelation)
	{
#>

		public <#= typeName #> <#=relation.PropertyName #> { get; set; }
<#	
	}
	else
	{
#>
		[ForeignKey(nameof(<#= relation.KeyPropertyName #>))]
		public <#= typeName #> <#=relation.PropertyName #> { get; set; }
<#
	}
}
#>
	}
#nullable restore
}