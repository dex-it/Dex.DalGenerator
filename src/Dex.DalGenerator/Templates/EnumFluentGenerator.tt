<#@ template debug="false" hostspecific="false" language="C#" #>
using <#= _enumNamespace #>;
using Microsoft.EntityFrameworkCore;
using Npgsql;
using System.Linq;
using System.Text.RegularExpressions;
using System;

namespace <#= _namespace #>
{
    internal static class EnumFluentDbProvider
    {
	    public static void MapEnum()
		{
<#
	foreach (var @enum in _enums)
	{
	    var enumName = @enum.Name;
#>
            NpgsqlConnection.GlobalTypeMapper.MapEnum<<#= enumName#>>(nameof(<#= enumName#>).ToLower());
<#
	}
#>
		}

	    private static string[] GetNames(Type enym)
	    {
		    var regex = new Regex(@"([A-Z])");
		    var result = Enum.GetNames(enym)
			    .Select(e => regex.Replace(e, match => $"_{match.Value.ToLower()}").Remove(0, 1));
		    return result.ToArray();
	    }

        public static void Config(ModelBuilder builder)
        {
<#
    foreach (var @enum in _enums)
	{
	    var enumName = @enum.Name;
#>
            builder.HasPostgresEnum(nameof(<#= enumName#>).ToLower(), GetNames(typeof(<#= enumName#>)));

<#
	}
#>
		}
    }
}